// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.android.model.responses.base.pagination

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class PageMetaJsonAdapter(
  moshi: Moshi
) : JsonAdapter<PageMeta>() {
  private val options: JsonReader.Options = JsonReader.Options.of("current_page", "from",
      "last_page", "path", "per_page", "to", "total")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "currentPage")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "from")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "path")

  public override fun toString(): String = buildString(30) {
      append("GeneratedJsonAdapter(").append("PageMeta").append(')') }

  public override fun fromJson(reader: JsonReader): PageMeta {
    var currentPage: Int? = null
    var from: Int? = null
    var lastPage: Int? = null
    var path: String? = null
    var perPage: Int? = null
    var to: Int? = null
    var total: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> currentPage = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("currentPage",
            "current_page", reader)
        1 -> from = nullableIntAdapter.fromJson(reader)
        2 -> lastPage = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("lastPage",
            "last_page", reader)
        3 -> path = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("path", "path",
            reader)
        4 -> perPage = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("perPage",
            "per_page", reader)
        5 -> to = nullableIntAdapter.fromJson(reader)
        6 -> total = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("total", "total",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return PageMeta(
        currentPage = currentPage ?: throw Util.missingProperty("currentPage", "current_page",
            reader),
        from = from,
        lastPage = lastPage ?: throw Util.missingProperty("lastPage", "last_page", reader),
        path = path ?: throw Util.missingProperty("path", "path", reader),
        perPage = perPage ?: throw Util.missingProperty("perPage", "per_page", reader),
        to = to,
        total = total ?: throw Util.missingProperty("total", "total", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: PageMeta?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("current_page")
    intAdapter.toJson(writer, value_.currentPage)
    writer.name("from")
    nullableIntAdapter.toJson(writer, value_.from)
    writer.name("last_page")
    intAdapter.toJson(writer, value_.lastPage)
    writer.name("path")
    stringAdapter.toJson(writer, value_.path)
    writer.name("per_page")
    intAdapter.toJson(writer, value_.perPage)
    writer.name("to")
    nullableIntAdapter.toJson(writer, value_.to)
    writer.name("total")
    intAdapter.toJson(writer, value_.total)
    writer.endObject()
  }
}
