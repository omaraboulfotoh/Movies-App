// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.android.model.responses.base.pagination

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Type
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class PaginatedArrayResponseWrapperJsonAdapter<T>(
  moshi: Moshi,
  types: Array<Type>
) : JsonAdapter<PaginatedArrayResponseWrapper<T>>() {
  init {
    require(types.size == 1) {
      buildString { append("TypeVariable mismatch: Expecting ").append(1).append(" type for generic type variables [").append("T").append("], but received ").append(types.size) }
    }
  }

  private val options: JsonReader.Options = JsonReader.Options.of("data", "links", "meta")

  private val listOfTNullableAnyAdapter: JsonAdapter<List<T>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, types[0]), emptySet(), "data")

  private val pagesLinksAdapter: JsonAdapter<PagesLinks> = moshi.adapter(PagesLinks::class.java,
      emptySet(), "links")

  private val pageMetaAdapter: JsonAdapter<PageMeta> = moshi.adapter(PageMeta::class.java,
      emptySet(), "meta")

  public override fun toString(): String = buildString(51) {
      append("GeneratedJsonAdapter(").append("PaginatedArrayResponseWrapper").append(')') }

  public override fun fromJson(reader: JsonReader): PaginatedArrayResponseWrapper<T> {
    var data_: List<T>? = null
    var links: PagesLinks? = null
    var meta: PageMeta? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> data_ = listOfTNullableAnyAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("data_", "data", reader)
        1 -> links = pagesLinksAdapter.fromJson(reader) ?: throw Util.unexpectedNull("links",
            "links", reader)
        2 -> meta = pageMetaAdapter.fromJson(reader) ?: throw Util.unexpectedNull("meta", "meta",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return PaginatedArrayResponseWrapper<T>(
        `data` = data_ ?: throw Util.missingProperty("data_", "data", reader),
        links = links ?: throw Util.missingProperty("links", "links", reader),
        meta = meta ?: throw Util.missingProperty("meta", "meta", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: PaginatedArrayResponseWrapper<T>?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("data")
    listOfTNullableAnyAdapter.toJson(writer, value_.`data`)
    writer.name("links")
    pagesLinksAdapter.toJson(writer, value_.links)
    writer.name("meta")
    pageMetaAdapter.toJson(writer, value_.meta)
    writer.endObject()
  }
}
